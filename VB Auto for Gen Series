import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation

# define the update function
def update_matrix(matrix):
    updated_matrix = matrix.copy()
    height, width = matrix.shape

    # loop over each cell in the matrix
    for i in range(height):
        for j in range(width):
            # check the number of black cells surrounding the current cell
            n_black = 0
            for x in range(i - 1, i + 2):
                for y in range(j - 1, j + 2):
                    if (x, y) != (i, j) and x >= 0 and y >= 0 and x < height and y < width:
                        if matrix[x, y] == 1:
                            n_black += 1

            # invert the cell color if a white cell borders 2 black cells
            if matrix[i, j] == 0 and n_black == 2:
                updated_matrix[i, j] = 1
            elif matrix[i, j] == 1 and (n_black == 0 or n_black > 2):
                updated_matrix[i, j] = 0

    return updated_matrix

# prompt user for binary number
binary_number = int(input("Input a binary number: "))

# convert binary number to decimal
decimal_number = int(str(binary_number), 2)

# calculate number of digits in binary number
num_digits = len(str(binary_number))

# prompt user for number of horizontal iterations
num_iterations = int(input("Enter the number of times to visualize the code horizontally: "))

# prompt user for number of vertical iterations
num_stacks = int(input("Enter the number of times to visualize the code vertically: "))

# create empty list to hold matrix
matrix = []

# create the original matrix
for i in range(decimal_number + 1):
    # convert decimal number to binary
    binary = format(i, '0' + str(num_digits) + 'b')

    # create reflection of binary number
    reflection = binary[::-1]

    # add binary number and reflection to matrix
    matrix.append([binary, reflection])

# create new matrix by stacking columns vertically
new_matrix = np.vstack([np.array([int(bit) for bit in row[0]] + [int(bit) for bit in row[1]]) for row in matrix])

# create a copy of the original matrix to use for vertical stacking
stacked_matrix = new_matrix

# vertically stack the original matrix with its successive mirror images n times
for i in range(1, num_stacks + 1):
    # create a rotated version of the current matrix
    rotated_matrix = np.rot90(new_matrix, 2)

    # vertically stack the original matrix and the rotated matrix
    stacked_matrix = np.vstack([stacked_matrix, rotated_matrix])

    # update the current matrix for the next iteration
    new_matrix = rotated_matrix

# create a copy of the stacked matrix to use for horizontal stacking
horizontal_matrix = stacked_matrix

# horizontally stack the stacked matrix with its successive mirror images n times
for i in range(1, num_iterations + 1):
    # create a rotated version of the current matrix
    rotated_matrix = np.rot90(stacked_matrix, 2)

    # horizontally stack the stacked matrix and the rotated matrix
    horizontal_matrix = np.hstack([horizontal_matrix, rotated_matrix])

    # update the current matrix for the next iteration
    stacked_matrix = rotated_matrix

# define the function that checks and updates the matrix
def update_matrix(matrix):
    updated_matrix = matrix.copy()
    height, width = matrix.shape

    # loop over each cell in the matrix
    for i in range(height):
        for j in range(width):
            # check the number of black cells surrounding the current cell
            n_black = 0
            for x in range(i - 1, i + 2):
                for y in range(j - 1, j + 2):
                    if (x, y) != (i, j) and x >= 0 and y >= 0 and x < height and y < width:
                        if matrix[x, y] == 1:
                            n_black += 1

            # invert the cell color if a white cell borders 2 black cells
            if matrix[i, j] == 0 and n_black == 2:
                updated_matrix[i, j] = 1
            elif matrix[i, j] == 1 and n_black % 2 == 1:
                # turn two diagonal black cells to white
                if i > 0 and j > 0 and matrix[i - 1, j - 1] == 1:
                    updated_matrix[i - 1, j - 1] = 0
                if i > 0 and j < width - 1 and matrix[i - 1, j + 1] == 1:
                    updated_matrix[i - 1, j + 1] = 0
                if i < height - 1 and j > 0 and matrix[i + 1, j - 1] == 1:
                    updated_matrix[i + 1, j - 1] = 0
                if i < height - 1 and j < width - 1 and matrix[i + 1, j + 1] == 1:
                    updated_matrix[i + 1, j + 1] = 0

    return updated_matrix

# create animation of the matrix
fig, ax = plt.subplots()
im = ax.imshow(horizontal_matrix, cmap='Greys', vmin=0, vmax=1)


# modify the animate function to take num_generations as input
def animate(num_generations):
    global horizontal_matrix
    for i in range(num_generations):
        matrix = update_matrix(horizontal_matrix)
        ax.imshow(matrix, cmap='binary', animated=True)
        horizontal_matrix = matrix
        plt.pause(0.1)

# get user input for number of generations
num_generations = int(input("Enter the number of generations to visualize: "))

# create the figure and axes
fig, ax = plt.subplots()

# plot the initial matrix
ax.imshow(horizontal_matrix, cmap='binary', animated=True)

# set the axis labels
ax.set_xticks([])
ax.set_yticks([])

# animate the matrix for the specified number of generations
animate(num_generations)

# create a continuous play loop for the animation
while True:
    # wait for a short time before updating the animation
    plt.pause(0.1)

# display the final plot
plt.show()
