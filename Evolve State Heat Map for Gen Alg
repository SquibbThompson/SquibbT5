import numpy as np
import matplotlib.pyplot as plt

# define the fitness function
def f(x):
    return np.sin(x)

# define the dispersion function
def dispersion(x, std):
    return np.exp(-0.5 * ((x - 5) / std) ** 2)

# set the number of generations and individuals
n_generations = 999
n_individuals = 9

# initialize the population with random values
population = np.random.uniform(1, 10, size=n_individuals)

# create a figure to display the matrix
fig, ax = plt.subplots(figsize=(10, 10))

# create an empty matrix to store the scores
scores = np.zeros((n_generations, n_individuals))

# evolve the population over time
for i in range(n_generations):

    # select the parents for each individual
    parents = np.zeros((n_individuals, 2), dtype=int)
    for j in range(n_individuals):
        neighbors = np.roll(population, -j)[1:5]
        fitness = f(neighbors)
        prob = dispersion(fitness, 0.5)
        prob /= prob.sum()
        parents[j] = np.random.choice(np.arange(4)+1, size=2, p=prob, replace=False)

    # create the offspring for each individual
    offspring = np.zeros_like(population)
    for j in range(n_individuals):
        p1, p2 = parents[j]
        avg = 0.5 * (population[p1] + population[p2])
        offspring[j] = avg +- np.random.uniform(-(avg), +(avg))

    # clip the values to stay within the range 1-10
    offspring = np.clip(offspring, 1, 10)

    # update the population with the offspring
    population = offspring

    # store the scores for this generation
    scores[i] = f(population)

# plot the matrix of scores
im = ax.imshow(scores.T, cmap="viridis", origin="lower", aspect="auto")

# add a color bar to the plot
cbar = ax.figure.colorbar(im, ax=ax)

# set the labels for the plot
ax.set_xlabel("Generation")
ax.set_ylabel("Individual")

# show the plot
plt.show()
